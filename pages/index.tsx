import type { NextPage } from 'next'
import Head from 'next/head'
import { useSession } from "next-auth/react"
import { useEffect, useState } from 'react'
import {
  Accordion,
  AccordionIcon,
  AccordionItem,
  AccordionButton,
  AccordionPanel,
  IconButton,
  Box,
  Button,
  Text,
  FormControl,
  FormLabel,
  Input,
  Stack,
  NumberInput,
  NumberInputField,
  Checkbox,
  useDisclosure,
  SimpleGrid,
} from '@chakra-ui/react'
import { AddIcon, CloseIcon } from '@chakra-ui/icons'
import { toast } from 'react-toastify'
import DatePicker from "react-datepicker"
import Moment from "moment-timezone"

import SwapRuleService from '../services/swapRule.service'
import { setAccessToken } from '../http-common'
import styles from '../styles/Home.module.css'
import Navbar from '../components/Navbar'
import { IUpdateSwapRule } from '../types/swapRules'
import { useGlobalState } from '../services/gloablState'


const Home: NextPage = () => {
  const { data: _sessionData } = useSession();
  const sessionData = _sessionData as any
  const [tokenSwapRules, setTokenSwapRules] = useGlobalState('tokenSwapRules')
  const [swapRuleUpdate, setSwapRuleUpdate] = useState({} as IUpdateSwapRule)
  const {
    isOpen: isUpdating,
    onOpen: onUpdating,
    onClose: onUpdated,
  } = useDisclosure()
  const {
    isOpen: isChecking,
    onOpen: onChecking,
    onClose: onDoneChecking,
  } = useDisclosure()

  useEffect(() => {
    if ( sessionData?.token?.id ) {
      console.log('setAccessToken', sessionData?.token?.access_token)
      setAccessToken( sessionData?.token?.access_token )
      onLoadSwapRules()
    }
  }, [sessionData?.token?.id])

  const onLoadSwapRules = async () => {
    if ( !sessionData ) {
      return
    }
    const rules = await SwapRuleService.getRulesByDiscord()
    if ( rules ) {
      setTokenSwapRules( rules )
    }
    console.log( 'onLoadSwapRules', rules )
  }

  const onUpdateSwapRule = async () => {
    onUpdating()
    const updatedRule = await SwapRuleService.update( swapRuleUpdate._id, swapRuleUpdate )
    if ( updatedRule ) {
      onLoadSwapRules()
      setSwapRuleUpdate({} as IUpdateSwapRule)
      toast.success('Updated Swap Rule!', {
        position: toast.POSITION.TOP_CENTER,
      })
    }
    onUpdated()
  }

  const onChangeSwapRule = ( swapSymbol: string, idx: number, key: string, value: any ) => {
    console.log('onChangeSwapRule', swapSymbol, idx, key, value )
    const swapRule = tokenSwapRules.find( tokenSwapRule => tokenSwapRule.swapTokenSymbol === swapSymbol)?.swapRules[idx]

    if ( !swapRule ) return

    let update = { ...swapRuleUpdate }

    if ( swapRuleUpdate._id !== swapRule._id) {
      update = { _id: swapRule._id }
    }

    // @ts-ignore: dynamic access
    update[key] = value
    setSwapRuleUpdate( update )
  }

  const onCheckSwapRules = async () => {
    onChecking()
    await SwapRuleService.checkSwaps()
    onDoneChecking()
  }

  console.log('swaps', tokenSwapRules)

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />

      <main className={styles.main}>

        <Text fontSize='lg' marginY="4" fontWeight="bold" textDecoration="underline">
          Swap Rules
        </Text>

        <Accordion minWidth="full" allowMultiple={true} defaultIndex={[]}>
          { tokenSwapRules.map( (tokenSwapRule) => {
            return(
              <AccordionItem key={tokenSwapRule.swapTokenSymbol}>

                <AccordionButton _expanded={{ bg: 'blue.400', color: 'white' }} minWidth="full">
                  <Box flex='1' textAlign='left'>
                    { tokenSwapRule.swapTokenSymbol }
                  </Box>
                  <AccordionIcon />
                </AccordionButton>

                <AccordionPanel minWidth="full" padding="0.5">
                  { tokenSwapRule.swapRules.map( (swapRule, idx) => {
                    const combined = swapRuleUpdate && swapRuleUpdate._id === swapRule._id ? { ...swapRule, ...swapRuleUpdate } : swapRule
                    let margin = undefined as string | undefined
                    if ( combined.baseTarget !== 0 && combined.swapTarget !== 0 ) {
                      if ( combined.invertPrice ) {
                        margin = `(${((combined.swapTarget - combined.baseTarget) / combined.baseTarget * 100).toFixed(0)}%)`
                      } else {
                        margin = `(${((combined.baseTarget - combined.swapTarget) / combined.swapTarget * 100).toFixed(0)}%)`
                      }
                    }
                    return(
                      <Accordion
                        key={swapRule._id}
                        minWidth="full"
                        allowMultiple={true}
                        defaultIndex={[]}
                      >

                        {/* Header */}

                        <AccordionItem>
                          <AccordionButton _expanded={{ bg: 'blue.600', color: 'white' }}>
                            <Stack flex='1' textAlign='left' direction="row">
                              <Text marginRight="2">
                                { combined.baseToken.symbol }
                              </Text>
                              <Text>
                                { combined.lastBuyUnitPrice &&
                                  `$${ combined.lastBuyUnitPrice } (${Moment(combined.lastBuyCheckAt).format("LT") })`
                                }
                                { (!combined.lastBuyUnitPrice && combined.lastSellUnitPrice) &&
                                  `$${ combined.lastSellUnitPrice } (${Moment(combined.lastSellCheckAt).format("LT") })`
                                }
                                {/* { (combined.lastBuyUnitPrice && combined.lastSellUnitPrice) && " | " }
                                { combined.lastSellUnitPrice &&
                                  `Last Sell Price: ${ combined.lastSellUnitPrice } (${Moment(combined.lastSellCheckAt).format("LT") }) |`
                                } */}
                              </Text>
                            </Stack>
                            <AccordionIcon />
                          </AccordionButton>

                          {/* Panel */}

                          <AccordionPanel>

                            <SimpleGrid columns={2} spacing={2} alignItems="center" marginY="2">

                              {/* Row 1 */}

                              <Stack direction="row">
                                <Stack direction="column">
                                  <FormControl>
                                    <FormLabel>Active?</FormLabel>
                                    <Checkbox
                                      isChecked={ combined.active }
                                      onChange={ e => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'active', e.target.checked ) }
                                    />
                                  </FormControl>
                                </Stack>
                                <Stack direction="column">
                                  <FormControl>
                                    <FormLabel>Invert?</FormLabel>
                                    <Checkbox
                                      isChecked={ combined.invertPrice }
                                      onChange={ e => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'invertPrice', e.target.checked ) }
                                    />
                                  </FormControl>
                                </Stack>
                              </Stack>

                              <Stack direction="column">
                                <FormControl>
                                  <FormLabel>Slippage %</FormLabel>
                                  <NumberInput
                                    size="sm"
                                    step={1.0}
                                    value={ combined.slippage }
                                    onChange={ value => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'slippage', parseFloat( value )) }
                                  >
                                    <NumberInputField />
                                  </NumberInput>
                                </FormControl>
                              </Stack>

                              {/* Inactive Dates */}

                              <Stack direction="column">
                                <FormLabel marginBottom="0">Inactive Before </FormLabel>
                                <DatePicker
                                  className="filter-calendar"
                                  selected={combined.inactiveBefore ? Moment( combined.inactiveBefore ).toDate() : null }
                                  dateFormat="Pp"
                                  onChange={ date => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'inactiveBefore', date?.toISOString() || '' ) }
                                  showTimeSelect
                                  timeFormat="HH:mm"
                                  timeIntervals={15}
                                  timeCaption="time"
                                  isClearable
                                />
                              </Stack>

                              <Stack direction="column">
                                <FormLabel marginBottom="0">Inactive After </FormLabel>
                                <DatePicker
                                  className="filter-calendar"
                                  selected={combined.inactiveAfter ? Moment( combined.inactiveAfter ).toDate() : null }
                                  dateFormat="Pp"
                                  onChange={ date => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'inactiveAfter', date?.toISOString() || '' ) }
                                  showTimeSelect
                                  timeFormat="HH:mm"
                                  timeIntervals={15}
                                  timeCaption="time"
                                  isClearable
                                />
                              </Stack>

                              {/* Enable / Disable Row */}

                              { combined.baseInput === 0 ?
                                <Stack direction="row">
                                  <IconButton aria-label='Enable Buy'
                                    icon={<AddIcon />}
                                    size="xs"
                                    borderRadius="3xl"
                                    backgroundColor="green.300"
                                    onClick={ () => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'baseInput', 1 ) }
                                  />
                                  <Text>Enable Buys</Text>
                                </Stack>
                                :
                                <Stack direction="column">
                                  <Stack direction="row">
                                    <IconButton aria-label='Disable Buy'
                                      icon={<CloseIcon />}
                                      size="xs"
                                      borderRadius="3xl"
                                      backgroundColor="red.300"
                                      onClick={ () => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'baseInput', 0 ) }
                                    />
                                    <Text>Disable Buy</Text>
                                  </Stack>

                                  <Stack direction="row">
                                    <FormLabel>Execute Buys</FormLabel>
                                    <Checkbox
                                      isChecked={ combined.isExecuteBuy }
                                      onChange={ e => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'isExecuteBuy', e.target.checked ) }
                                    />
                                  </Stack>
                                </Stack>
                              }

                              { combined.swapInput === 0 ?
                                <Stack direction="row">
                                  <IconButton aria-label='Enable Sell'
                                    icon={<AddIcon />}
                                    size="xs"
                                    borderRadius="3xl"
                                    backgroundColor="green.300"
                                    onClick={ () => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'swapInput', 1 ) }
                                  />
                                  <Text>Enable Sell</Text>
                                </Stack>
                                :
                                <Stack direction="column">
                                  <Stack direction="row">
                                    <IconButton aria-label='Disable Sell'
                                      icon={<CloseIcon />}
                                      size="xs"
                                      borderRadius="3xl"
                                      backgroundColor="red.300"
                                      onClick={ () => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'swapInput', 0 ) }
                                    />
                                    <Text>Disable Sell</Text>
                                  </Stack>

                                  <Stack direction="row">
                                    <FormLabel>Execute Sell</FormLabel>
                                    <Checkbox
                                      isChecked={ combined.isExecuteSell }
                                      onChange={ e => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'isExecuteSell', e.target.checked ) }
                                    />
                                  </Stack>
                                </Stack>
                              }

                              {/* Targets Row  */}

                              { combined.baseInput !== 0 ?
                                <FormControl>
                                  <FormLabel>Buy { combined.invertPrice ? "Above" : "Below" }</FormLabel>
                                  <NumberInput
                                    size="sm"
                                    step={1.0}
                                    defaultValue={ combined.swapTarget }
                                    onBlur={ e => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'swapTarget', parseFloat(e.target.value)) }
                                  >
                                    <NumberInputField />
                                  </NumberInput>
                                </FormControl>
                                :
                                <Box/>
                              }
                              
                              { combined.swapInput !== 0 ?
                                <FormControl>
                                  <Stack direction="row">
                                    <FormLabel>
                                      Sell { combined.invertPrice ? "Below" : "Above" }
                                    </FormLabel>
                                    <Text color="blue.400">{ margin }</Text>
                                  </Stack>
                                  <NumberInput
                                    size="sm"
                                    step={1.0}
                                    defaultValue={ combined.baseTarget }
                                    onBlur={ e => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'baseTarget', parseFloat(e.target.value)) }
                                  >
                                    <NumberInputField />
                                  </NumberInput>
                                </FormControl>
                                :
                                <Box/>
                              }
                              
                              {/* Amounts Row */}

                              { combined.baseInput !== 0 ?
                                <FormControl>
                                  <FormLabel>Amount { combined.baseToken.symbol } </FormLabel>
                                  <NumberInput
                                    size="sm"
                                    step={1.0}
                                    defaultValue={ combined.baseInput }
                                    onBlur={ e => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'baseInput', parseFloat(e.target.value)) }
                                  >
                                    <NumberInputField />
                                  </NumberInput>
                                </FormControl>
                                :
                                <Box />
                              }

                              { combined.swapInput !== 0 ?
                                <FormControl>
                                  <FormLabel>Amount { combined.swapToken.symbol } </FormLabel>
                                  <NumberInput
                                    size="sm"
                                    step={1.0}
                                    defaultValue={ combined.swapInput }
                                    onBlur={ e => onChangeSwapRule( tokenSwapRule.swapTokenSymbol, idx, 'swapInput', parseFloat(e.target.value)) }
                                  >
                                    <NumberInputField />
                                  </NumberInput>
                                </FormControl>
                                :
                                <Box />
                              }
                              
                            </SimpleGrid>

                            { swapRuleUpdate._id &&
                              <Button
                                isLoading={isUpdating}
                                loadingText='Saving...'
                                colorScheme='teal'
                                variant='solid'
                                onClick={onUpdateSwapRule}
                              >
                                Save
                              </Button>
                            }
                          </AccordionPanel>
                        </AccordionItem>
                      </Accordion>
                    )
                  })}
                </AccordionPanel>
              </AccordionItem>
            )
          })}
        </Accordion>

        <Button
          isLoading={isChecking}
          loadingText='Checking...'
          colorScheme="green"
          variant='solid'
          marginTop="8"
          onClick={onCheckSwapRules}
        >
          Check Rules
        </Button>
      </main>
    </div>
  )
}

export default Home
