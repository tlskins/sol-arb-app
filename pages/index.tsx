import type { NextPage } from 'next'
import Head from 'next/head'
import { useSession } from "next-auth/react";
import { useEffect } from 'react'
import {
  Accordion,
  AccordionIcon,
  AccordionItem,
  AccordionButton,
  AccordionPanel,
  Box,
  Button,
  Text,
  FormControl,
  FormLabel,
  Input,
  Stack,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  Checkbox,
  useDisclosure,
} from '@chakra-ui/react';
import { toast } from 'react-toastify';

import SwapRuleService from '../services/swapRule.service'
import { setAccessToken } from '../http-common'
import styles from '../styles/Home.module.css'
import Navbar from '../components/Navbar';
import { ISwapRule, IUpdateSwapRule } from '../types/swapRules'

import { useState } from 'react'


const Home: NextPage = () => {
  const { data: sessionData, status: sessionStatus } = useSession();
  const [swapRules, setSwapRules] = useState([] as ISwapRule[])
  const [swapRuleUpdate, setSwapRuleUpdate] = useState({} as IUpdateSwapRule)
  const {
    isOpen: isUpdating,
    onOpen: onUpdating,
    onClose: onUpdated,
  } = useDisclosure()

  console.log('index', sessionData, sessionStatus)
  console.log('update', swapRuleUpdate)

  useEffect(() => {
    if ( sessionData?.token?.id ) {
      console.log('setAccessToken', sessionData?.token?.access_token)
      setAccessToken( sessionData?.token?.access_token )
      onLoadSwapRules()
    }
  }, [sessionData?.token?.id])

  const onLoadSwapRules = async () => {
    if ( !sessionData ) {
      return
    }
    const rules = await SwapRuleService.getRulesByDiscord( (sessionData?.token?.id || '') as string )
    if ( rules ) {
      setSwapRules( rules )
    }
    console.log( 'onLoadSwapRules', rules )
  }

  const onUpdateSwapRule = async () => {
    onUpdating()
    const updatedRule = await SwapRuleService.update( swapRuleUpdate._id, swapRuleUpdate )
    if ( updatedRule ) {
      onLoadSwapRules()
      setSwapRuleUpdate({} as IUpdateSwapRule)
      toast.success('Updated Swap Rule!', {
        position: toast.POSITION.TOP_CENTER,
      })
    }
    onUpdated()
  }

  const onChangeSwapRule = ( idx: number, key: string ) => (value: any) => {
    const swapRule = swapRules[idx]

    let update = { ...swapRuleUpdate }

    if ( swapRuleUpdate._id !== swapRule._id) {
      update = { _id: swapRule._id }
    }

    update[key] = value
    setSwapRuleUpdate( update )
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />

      <main className={styles.main}>

        <Text fontSize='lg' marginY="4" fontWeight="bold" textDecoration="underline">
          Swap Rules
        </Text>

        <Accordion allowMultiple minWidth="full">
          { swapRules.map( (swapRule, idx) => {
            const combined = swapRuleUpdate && swapRuleUpdate._id === swapRule._id ? { ...swapRule, ...swapRuleUpdate} : swapRule
            return(
              <AccordionItem key={swapRule._id}>
                <h2>
                  <AccordionButton _expanded={{ bg: 'blue.400', color: 'white' }}>
                    <Box flex='1' textAlign='left'>
                      { `${ swapRule.inputAmount } ${ swapRule.inputToken.symbol} -> ${ swapRule.targetAmount } ${ swapRule.targetToken.symbol}` }
                    </Box>
                    <AccordionIcon />
                  </AccordionButton>
                </h2>

                <AccordionPanel py={8}>
                  <FormControl>
                    <Stack direction="row">
                      <FormLabel>Active?</FormLabel>
                      <Checkbox checked={ combined.active } onChange={ e => onChangeSwapRule( idx, 'active' )( e.target.checked ) }/>
                    </Stack>
                  </FormControl>

                  <FormControl>
                    <FormLabel>Input Token</FormLabel>
                    <Input type='text'
                      value={ combined.inputTokenSym }
                      onChange={ e => onChangeSwapRule( idx, 'inputTokenSym' )( e.target.value ) }
                    />
                  </FormControl>

                  <FormControl>
                    <FormLabel>Input Amount</FormLabel>
                    <NumberInput precision={2}
                      step={1.0}
                      value={ combined.inputAmount }
                      onChange={ value => onChangeSwapRule( idx, 'inputAmount' )( parseFloat( value )) }
                    >
                      <NumberInputField />
                      <NumberInputStepper>
                        <NumberIncrementStepper />
                        <NumberDecrementStepper />
                      </NumberInputStepper>
                    </NumberInput>
                  </FormControl>

                  <FormControl>
                    <FormLabel>Target Token</FormLabel>
                    <Input type='text'
                      value={ combined.targetTokenSym }
                      onChange={  e => onChangeSwapRule( idx, 'targetTokenSym' )( e.target.value ) }
                    />
                  </FormControl>

                  <FormControl>
                    <FormLabel>Target Amount</FormLabel>
                    <NumberInput precision={2}
                      step={1.0}
                      value={ combined.targetAmount }
                      onChange={ value => onChangeSwapRule( idx, 'targetAmount' )( parseFloat( value )) }
                    >
                      <NumberInputField />
                      <NumberInputStepper>
                        <NumberIncrementStepper />
                        <NumberDecrementStepper />
                      </NumberInputStepper>
                    </NumberInput>
                  </FormControl>

                  <FormControl>
                    <FormLabel>Decimals</FormLabel>
                    <NumberInput
                      step={1.0}
                      value={ combined.decimals }
                      onChange={ e => onChangeSwapRule( idx, 'decimals' )( parseFloat( e.target.value )) }
                    >
                      <NumberInputField />
                      <NumberInputStepper>
                        <NumberIncrementStepper />
                        <NumberDecrementStepper />
                      </NumberInputStepper>
                    </NumberInput>
                  </FormControl>

                  <FormControl>
                    <FormLabel>Slippage %</FormLabel>
                    <NumberInput
                      step={1.0}
                      value={ combined.slippage }
                      onChange={ e => onChangeSwapRule( idx, 'slippage' )( parseFloat( e.target.value )) }
                    >
                      <NumberInputField />
                      <NumberInputStepper>
                        <NumberIncrementStepper />
                        <NumberDecrementStepper />
                      </NumberInputStepper>
                    </NumberInput>
                  </FormControl>

                  <Stack direction="row" my={4}>
                    <FormControl>
                      <Stack direction="row">
                        <FormLabel>Invert Price?</FormLabel>
                        <Checkbox checked={ combined.invTargetAmount } onChange={ e => onChangeSwapRule( idx, 'invTargetAmount' )( e.target.checked ) }/>
                      </Stack>
                    </FormControl>

                    <FormControl>
                      <Stack direction="row">
                        <FormLabel>Unit Price?</FormLabel>
                        <Checkbox checked={ combined.unitPrice } onChange={ e => onChangeSwapRule( idx, 'unitPrice' )( e.target.checked ) }/>
                      </Stack>
                    </FormControl>
                  </Stack>

                  { swapRuleUpdate._id &&
                    <Button
                      isLoading={isUpdating}
                      loadingText='Saving...'
                      colorScheme='teal'
                      variant='solid'
                      onClick={onUpdateSwapRule}
                    >
                      Save
                    </Button>
                  }

                </AccordionPanel>
              </AccordionItem>
            )
          })}
        </Accordion>
      </main>
    </div>
  )
}

export default Home
